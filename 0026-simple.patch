From aec77291cc5d19c7db8de0957c6bde93b14591ad Mon Sep 17 00:00:00 2001
From: starwarrior77 <kkk792100@naver.com>
Date: Wed, 18 Jun 2025 10:07:29 +0900
Subject: [PATCH 26/33] =?UTF-8?q?simple=EB=A1=9C=20=EA=B0=80=EC=A0=B8?=
 =?UTF-8?q?=EC=98=A4=EA=B8=B0=20=EB=B0=98=EC=98=81?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 client/src/components/InterviewSetup.vue   |  45 ++++++++-
 client/src/components/InterviewerLogin.vue | 109 ++++++++++++++++-----
 client/vite.config.ts                      |   2 +-
 3 files changed, 126 insertions(+), 30 deletions(-)

diff --git a/client/src/components/InterviewSetup.vue b/client/src/components/InterviewSetup.vue
index 7ba3243..5407b41 100644
--- a/client/src/components/InterviewSetup.vue
+++ b/client/src/components/InterviewSetup.vue
@@ -170,6 +170,9 @@ const error = ref<string | null>(null);
 const showAdminLogin = ref(false);
 const selectedSchedule = ref<any>(null);
 
+// 지원자 정보를 저장할 변수 추가
+const intervieweeData = ref<any[]>([]);
+
 // API 데이터에서 동적으로 rooms 생성
 const rooms = computed(() => {
   const uniqueRooms = new Set(schedules.value.map(schedule => schedule.roomName));
@@ -224,6 +227,27 @@ const fetchSchedules = async () => {
   }
 };
 
+// 지원자 정보를 가져오는 함수 추가
+const fetchInterviewees = async () => {
+  try {
+    const response = await fetch('/api/v1/interviews/simple', {
+      method: 'GET',
+      headers: {
+        'Content-Type': 'application/json'
+      }
+    });
+    
+    if (!response.ok) {
+      throw new Error('지원자 정보 조회 실패');
+    }
+    
+    const data = await response.json();
+    intervieweeData.value = data.data || [];
+  } catch (err) {
+    console.error('지원자 정보 조회 중 오류:', err);
+  }
+};
+
 // 날짜가 변경될 때마다 일정을 다시 불러옵니다
 watch(selectedDate, () => {
   fetchSchedules();
@@ -237,6 +261,22 @@ const selectTimeSlot = (schedule: any) => {
 const onStartInterview = () => {
   if (!canProceed.value || !selectedSchedule.value) return;
   
+  // 지원자 이름을 ID로 매핑
+  const candidateIds: number[] = [];
+  const candidateNames: string[] = [];
+  
+  selectedSchedule.value.interviewees.forEach((name: string) => {
+    const interviewee = intervieweeData.value.find(item => item.name === name);
+    if (interviewee) {
+      candidateIds.push(interviewee.id);
+      candidateNames.push(name);
+    } else {
+      console.warn(`지원자 정보를 찾을 수 없습니다: ${name}`);
+      // 임시로 이름을 그대로 사용
+      candidateNames.push(name);
+    }
+  });
+  
   router.push({
     name: 'interview',
     query: {
@@ -245,8 +285,8 @@ const onStartInterview = () => {
       timeRange: selectedSchedule.value.timeRange,
       interviewers: selectedSchedule.value.interviewers.join(', '),
       interviewerIds: JSON.stringify(selectedSchedule.value.interviewerIds),
-      candidates: JSON.stringify(selectedSchedule.value.interviewees),
-      candidateIds: JSON.stringify(selectedSchedule.value.interviewees)
+      candidates: JSON.stringify(candidateNames),
+      candidateIds: JSON.stringify(candidateIds)
     }
   });
 };
@@ -264,6 +304,7 @@ const logout = () => {
 
 onMounted(() => {
   fetchSchedules();
+  fetchInterviewees(); // 지원자 정보도 함께 가져오기
   document.addEventListener('click', (event) => {
     const target = event.target as HTMLElement;
     if (!target.closest('.relative') && showRoomDropdown.value) {
diff --git a/client/src/components/InterviewerLogin.vue b/client/src/components/InterviewerLogin.vue
index 0824648..6be1e5b 100644
--- a/client/src/components/InterviewerLogin.vue
+++ b/client/src/components/InterviewerLogin.vue
@@ -190,7 +190,9 @@ const showRegistration = ref(false)
 // 로그인 처리
 const handleLogin = async () => {
   try {
-    fetch('http://sk-axis-springboot:8080/api/v1/auth/login', {
+    loginError.value = '';
+    
+    const response = await fetch('/api/v1/auth/login', {
       method: 'POST',
       headers: {
         'Content-Type': 'application/json'
@@ -199,67 +201,120 @@ const handleLogin = async () => {
         userName: loginForm.value.username,
         password: loginForm.value.password
       })
-    })
+    });
+
+    if (response.ok) {
+      // JWT 토큰을 헤더에서 추출
+      const authHeader = response.headers.get('Authorization');
+      if (authHeader && authHeader.startsWith('Bearer ')) {
+        const token = authHeader.substring(7);
+        // 토큰을 localStorage에 저장
+        localStorage.setItem('accessToken', token);
+        console.log('로그인 성공, 토큰 저장됨');
+      }
+      
+      // 로그인 성공 시 면접 설정 페이지로 이동
+      router.push('/setup');
+    } else {
+      let errorMessage = '로그인에 실패했습니다.';
+      try {
+        const errorData = await response.json();
+        errorMessage = errorData.message || errorMessage;
+      } catch (e) {
+        // JSON 파싱 실패 시 기본 메시지 사용
+      }
+      loginError.value = errorMessage;
+    }
   } catch (error) {
-    loginError.value = '로그인 중 오류가 발생했습니다.'
+    console.error('로그인 중 오류:', error);
+    loginError.value = '네트워크 오류가 발생했습니다. 서버 연결을 확인해주세요.';
   }
 }
 
 // 회원가입 처리
-const handleRegistration = () => {
+const handleRegistration = async () => {
   // 에러 메시지 초기화
-  registrationError.value = ''
+  registrationError.value = '';
   
   // 폼 검증
   if (!registrationForm.value.name.trim()) {
-    registrationError.value = '이름을 입력해주세요.'
-    return
+    registrationError.value = '이름을 입력해주세요.';
+    return;
   }
   
   if (!registrationForm.value.username.trim()) {
-    registrationError.value = '아이디를 입력해주세요.'
-    return
+    registrationError.value = '아이디를 입력해주세요.';
+    return;
   }
   
   if (registrationForm.value.username.length < 3) {
-    registrationError.value = '아이디는 3자 이상이어야 합니다.'
-    return
+    registrationError.value = '아이디는 3자 이상이어야 합니다.';
+    return;
   }
   
   if (!registrationForm.value.email.trim()) {
-    registrationError.value = '이메일을 입력해주세요.'
-    return
+    registrationError.value = '이메일을 입력해주세요.';
+    return;
   }
   
   // 이메일 형식 검증
   const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
   if (!emailRegex.test(registrationForm.value.email)) {
-    registrationError.value = '올바른 이메일 형식을 입력해주세요.'
-    return
+    registrationError.value = '올바른 이메일 형식을 입력해주세요.';
+    return;
   }
   
   if (!registrationForm.value.password) {
-    registrationError.value = '비밀번호를 입력해주세요.'
-    return
+    registrationError.value = '비밀번호를 입력해주세요.';
+    return;
   }
   
   if (registrationForm.value.password.length < 6) {
-    registrationError.value = '비밀번호는 6자 이상이어야 합니다.'
-    return
+    registrationError.value = '비밀번호는 6자 이상이어야 합니다.';
+    return;
   }
   
   if (registrationForm.value.password !== registrationForm.value.confirmPassword) {
-    registrationError.value = '비밀번호가 일치하지 않습니다.'
-    return
+    registrationError.value = '비밀번호가 일치하지 않습니다.';
+    return;
   }
   
   if (!registrationForm.value.department) {
-    registrationError.value = '부서를 선택해주세요.'
-    return
+    registrationError.value = '부서를 선택해주세요.';
+    return;
   }
   
-  // 회원가입 성공 처리
-  showSuccessModal()
+  // 회원가입 API 호출
+  try {
+    const response = await fetch('/api/v1/auth/signup/interviewer', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify({
+        userName: registrationForm.value.username,
+        name: registrationForm.value.name,
+        password: registrationForm.value.password
+      })
+    });
+
+    if (response.ok) {
+      // 회원가입 성공 처리
+      showSuccessModal();
+    } else {
+      let errorMessage = '회원가입에 실패했습니다.';
+      try {
+        const errorData = await response.json();
+        errorMessage = errorData.message || errorMessage;
+      } catch (e) {
+        // JSON 파싱 실패 시 기본 메시지 사용
+      }
+      registrationError.value = errorMessage;
+    }
+  } catch (error) {
+    console.error('회원가입 중 오류:', error);
+    registrationError.value = '네트워크 오류가 발생했습니다. 서버 연결을 확인해주세요.';
+  }
 }
 
 // 성공 모달 표시
@@ -273,10 +328,10 @@ const showSuccessModal = () => {
           <i class="fas fa-check text-green-500 text-3xl"></i>
         </div>
         <h3 class="text-xl font-bold text-gray-900 mb-2">회원가입 완료</h3>
-        <p class="text-gray-600">회원가입이 성공적으로 완료되었습니다.<br>로그인 페이지로 이동합니다.</p>
+        <p class="text-gray-600">회원가입이 성공적으로 완료되었습니다.<br>이제 로그인하여 면접 시스템을 이용하실 수 있습니다.</p>
       </div>
       <button class="w-full bg-red-600 text-white py-2 rounded-md font-medium hover:bg-red-700 transition-colors cursor-pointer">
-        확인
+        로그인으로 이동
       </button>
     </div>
   `
diff --git a/client/vite.config.ts b/client/vite.config.ts
index e37cca9..4e32e13 100644
--- a/client/vite.config.ts
+++ b/client/vite.config.ts
@@ -14,7 +14,7 @@ export default defineConfig({
     open: true,
     proxy: {
       '/api': {
-        target: 'http://localhost:8000',
+        target: 'http://sk-axis-springboot:8080',
         changeOrigin: true,
         secure: false
       }
-- 
2.39.5 (Apple Git-154)

