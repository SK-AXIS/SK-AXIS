From d859456493e41845cce492dcb9d20db57221e7bd Mon Sep 17 00:00:00 2001
From: wochae <officialwochae@gmail.com>
Date: Tue, 10 Jun 2025 15:32:14 +0900
Subject: [PATCH 09/33] [fix]: interview feature back,front

---
 client/nginx.conf                        |  11 ++
 client/src/components/InterviewSetup.vue | 128 ++++++++++++++---------
 client/src/services/interviewService.ts  |  31 ++++++
 3 files changed, 121 insertions(+), 49 deletions(-)

diff --git a/client/nginx.conf b/client/nginx.conf
index 6b6ee74..15e0ccb 100644
--- a/client/nginx.conf
+++ b/client/nginx.conf
@@ -34,6 +34,17 @@ server {
         proxy_send_timeout 300s;
     }
 
+    # Swagger UI 및 API 문서 프록시 (통합)
+    location ~ ^/(swagger-ui|swagger-ui.html|v3/api-docs|swagger-resources|webjars) {
+        proxy_pass http://springboot:8080;
+        proxy_set_header Host $host;
+        proxy_set_header X-Real-IP $remote_addr;
+        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+        proxy_set_header X-Forwarded-Proto $scheme;
+        proxy_set_header X-Forwarded-Host $host;
+        proxy_set_header X-Forwarded-Port $server_port;
+    }
+
     # WebSocket 연결 프록시 - 비언어적 요소 분석용
     location /ws/ {
         proxy_pass http://fastapi:8000/ws/;
diff --git a/client/src/components/InterviewSetup.vue b/client/src/components/InterviewSetup.vue
index 94adad6..3ce1f5f 100644
--- a/client/src/components/InterviewSetup.vue
+++ b/client/src/components/InterviewSetup.vue
@@ -52,7 +52,14 @@
       </div>
       <div class="mb-6" v-if="selectedRoom">
         <label class="block text-sm font-medium text-gray-700 mb-2">면접 일정</label>
-        <div class="overflow-x-auto">
+        <div v-if="loading" class="text-center py-4">
+          <i class="fas fa-spinner fa-spin text-gray-500"></i>
+          <span class="ml-2 text-gray-500">일정을 불러오는 중...</span>
+        </div>
+        <div v-else-if="error" class="text-center py-4 text-red-500">
+          {{ error }}
+        </div>
+        <div v-else class="overflow-x-auto">
           <table class="min-w-full bg-white border border-gray-200">
             <thead>
               <tr class="bg-gray-50">
@@ -62,32 +69,18 @@
                 <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider border-b w-20">선택</th>
               </tr>
             </thead>
-            <tbody class="divide-y divide-gray-200">
-              <tr v-for="timeSlot in availableTimeSlots"
-                  :key="timeSlot.id"
-                  class="hover:bg-gray-50 cursor-pointer transition-colors"
-                  :class="{'bg-red-50': selectedTimeSlot === timeSlot.id}"
-                  @click="selectedTimeSlot = timeSlot.id">
-                <td class="px-4 py-3 text-sm text-gray-900 whitespace-nowrap text-center">{{ timeSlot.timeRange }}</td>
-                <td class="px-4 py-3 text-sm text-gray-600">
-                  <div class="flex flex-col items-center space-y-1">
-                    <div v-for="interviewerId in timeSlot.interviewerIds" :key="interviewerId" class="text-center">
-                      {{ getPersonById(interviewerId)?.name }}
-                    </div>
-                  </div>
-                </td>
-                <td class="px-4 py-3 text-sm text-gray-600">
-                  <div class="flex flex-col items-center space-y-1">
-                    <div v-for="candidateId in timeSlot.candidateIds" :key="candidateId" class="text-center">
-                      {{ getPersonById(candidateId)?.name }}
-                    </div>
-                  </div>
-                </td>
-                <td class="px-4 py-3 text-center">
-                  <div class="w-5 h-5 rounded-full border inline-flex items-center justify-center mx-auto"
-                       :class="selectedTimeSlot === timeSlot.id ? 'border-red-500 bg-red-500' : 'border-gray-300'">
-                    <i v-if="selectedTimeSlot === timeSlot.id" class="fas fa-check text-white text-xs"></i>
-                  </div>
+            <tbody>
+              <tr v-for="schedule in filteredSchedules" :key="schedule.timeRange" class="hover:bg-gray-50">
+                <td class="px-4 py-3 text-center text-sm text-gray-700 border-b">{{ schedule.timeRange }}</td>
+                <td class="px-4 py-3 text-center text-sm text-gray-700 border-b">{{ schedule.interviewers.join(', ') }}</td>
+                <td class="px-4 py-3 text-center text-sm text-gray-700 border-b">{{ schedule.interviewees.join(', ') }}</td>
+                <td class="px-4 py-3 text-center border-b">
+                  <button
+                    @click="selectTimeSlot(schedule)"
+                    class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
+                  >
+                    선택
+                  </button>
                 </td>
               </tr>
             </tbody>
@@ -120,11 +113,12 @@
 </template>
 
 <script setup lang="ts">
-import { ref, computed, onMounted } from 'vue';
+import { ref, computed, onMounted, watch } from 'vue';
 import { useRouter } from 'vue-router';
 import type { Room, TimeSlot, Person } from '../data/interviewData';
-import { getPersonById } from '../data/interviewData';
+// getPersonById 제거 (사용하지 않음)
 import AdminLoginModal from './AdminLoginModal.vue';
+import { getInterviewSchedules } from '../services/interviewService';
 
 interface Props {
   rooms: Room[];
@@ -143,8 +137,12 @@ const router = useRouter();
 const selectedRoom = ref<string>('');
 const selectedTimeSlot = ref<string>('');
 const showRoomDropdown = ref(false);
-const selectedDate = ref<string>(new Date().toISOString().split('T')[0]); // 오늘 날짜를 기본값으로
+const selectedDate = ref<string>(new Date().toISOString().split('T')[0]);
+const schedules = ref<any[]>([]);
+const loading = ref(false);
+const error = ref<string | null>(null);
 const showAdminLogin = ref(false);
+const selectedSchedule = ref<any>(null);
 
 // 오늘 날짜와 선택된 날짜가 일치하는지 확인하는 computed 속성 추가
 const isToday = computed(() => {
@@ -152,21 +150,29 @@ const isToday = computed(() => {
   return selectedDate.value === today;
 });
 
-const availableTimeSlots = computed(() => {
-  if (!selectedRoom.value || !selectedDate.value) return [];
-  return props.timeSlots.filter(slot => 
-    slot.roomId === selectedRoom.value && 
-    slot.date === selectedDate.value &&
-    slot.candidateIds.length > 0
-  );
-});
+// Remove the unused availableTimeSlots computed property
+// const availableTimeSlots = computed(() => {
+//   if (!selectedRoom.value || !selectedDate.value) return [];
+//   return props.timeSlots.filter(slot => 
+//     slot.roomId === selectedRoom.value && 
+//     slot.date === selectedDate.value &&
+//     slot.candidateIds.length > 0
+//   );
+// });
 
 const canProceed = computed(() => {
   return selectedRoom.value && 
          selectedTimeSlot.value && 
-         isToday.value; // 오늘 날짜와 일치하는 경우에만 true
+         isToday.value && 
+         selectedSchedule.value; // 선택된 일정이 있는 경우에만 true
 });
 
+const filteredSchedules = computed(() =>
+  schedules.value.filter(schedule => 
+    schedule.roomName === props.rooms.find(r => r.id === selectedRoom.value)?.name
+  )
+);
+
 const toggleRoomDropdown = () => { showRoomDropdown.value = !showRoomDropdown.value; };
 const selectRoom = (roomId: string) => {
   selectedRoom.value = roomId;
@@ -174,22 +180,45 @@ const selectRoom = (roomId: string) => {
   showRoomDropdown.value = false;
 };
 
-const onStartInterview = () => {
-  if (!canProceed.value) return;
-  const timeSlot = availableTimeSlots.value.find(t => t.id === selectedTimeSlot.value);
-  if (!timeSlot) return;
+const fetchSchedules = async () => {
+  if (!selectedDate.value) return;
+  
+  loading.value = true;
+  error.value = null;
   
-  const roomName = props.rooms.find(r => r.id === selectedRoom.value)?.name || '';
+  try {
+    const response = await getInterviewSchedules(selectedDate.value);
+    schedules.value = response.schedules;
+  } catch (err) {
+    error.value = '면접 일정을 불러오는데 실패했습니다.';
+    console.error(err);
+  } finally {
+    loading.value = false;
+  }
+};
+
+// 날짜가 변경될 때마다 일정을 다시 불러옵니다
+watch(selectedDate, () => {
+  fetchSchedules();
+});
+
+const selectTimeSlot = (schedule: any) => {
+  selectedSchedule.value = schedule;
+  selectedTimeSlot.value = schedule.timeRange;
+};
+
+const onStartInterview = () => {
+  if (!canProceed.value || !selectedSchedule.value) return;
   
   router.push({
     name: 'interview',
     query: {
-      roomName,
+      roomName: selectedSchedule.value.roomName,
       date: selectedDate.value,
-      timeRange: timeSlot.timeRange,
-      interviewers: timeSlot.interviewerIds.map(id => getPersonById(id)?.name).join(', '),
-      candidates: JSON.stringify(timeSlot.candidateIds.map(id => getPersonById(id)?.name)),
-      candidateIds: JSON.stringify(timeSlot.candidateIds)
+      timeRange: selectedSchedule.value.timeRange,
+      interviewers: selectedSchedule.value.interviewers.join(', '),
+      candidates: JSON.stringify(selectedSchedule.value.interviewees),
+      candidateIds: JSON.stringify(selectedSchedule.value.interviewees)
     }
   });
 };
@@ -200,6 +229,7 @@ const handleAdminLogin = () => {
 };
 
 onMounted(() => {
+  fetchSchedules();
   document.addEventListener('click', (event) => {
     const target = event.target as HTMLElement;
     if (!target.closest('.relative') && showRoomDropdown.value) {
diff --git a/client/src/services/interviewService.ts b/client/src/services/interviewService.ts
index e69de29..7d7b365 100644
--- a/client/src/services/interviewService.ts
+++ b/client/src/services/interviewService.ts
@@ -0,0 +1,31 @@
+import axios from 'axios';
+
+// 환경에 따른 API URL 설정
+const API_BASE_URL = process.env.NODE_ENV === 'production' 
+  ? '/api/spring'  // Docker 환경에서는 nginx 프록시 경로
+  : 'http://localhost:8080/api/v1';  // 개발 환경에서는 직접 접근
+
+interface InterviewSchedule {
+  interviewDate: number[];
+  timeRange: string;
+  roomName: string;
+  interviewers: string[];
+  interviewees: string[];
+}
+
+interface ScheduleResponse {
+  schedules: InterviewSchedule[];
+  message: string;
+}
+
+export const getInterviewSchedules = async (date: string): Promise<ScheduleResponse> => {
+  try {
+    const response = await axios.get<ScheduleResponse>(`${API_BASE_URL}/interviews/all`, {
+      params: { date }
+    });
+    return response.data;
+  } catch (error) {
+    console.error('면접 일정 조회 중 오류 발생:', error);
+    throw error;
+  }
+};
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)

