name: Deploy AI, Client & Server

on:
  push:
    branches:
      - '**'
    paths:
      - 'ai/**'
      - 'client/**'
      - 'server/**'     # server 디렉토리 변경 시에도 트리거

jobs:
  build-and-deploy-ai:
    name: Build & Deploy AI
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push AI image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/skaxis-ai:latest \
            --push ./ai

      - name: Deploy AI to EC2
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          port:     ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ec2-user/SK-AXIS
            docker pull ${{ secrets.DOCKER_USERNAME }}/skaxis-ai:latest
            docker-compose -f docker-compose.prod.yml down fastapi || true
            docker-compose -f docker-compose.prod.yml up -d fastapi
            docker image prune -f

  build-and-deploy-client:
    name: Build & Deploy Client
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Client image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/skaxis-client:latest \
            --push ./client

      - name: Deploy Client to EC2
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          port:     ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ec2-user/SK-AXIS
            docker pull ${{ secrets.DOCKER_USERNAME }}/skaxis-client:latest
            docker-compose -f docker-compose.prod.yml down client || true
            docker-compose -f docker-compose.prod.yml up -d client
            docker image prune -f

  build-and-deploy-server:
    name: Build & Deploy Server
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'   # 서버는 main 브랜치에서만
    environment: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Server image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/skaxis-server:latest \
            --push ./server

      - name: Deploy Server to EC2
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ec2-user
          key:      ${{ secrets.EC2_SSH_KEY }}
          port:     ${{ secrets.EC2_PORT }}
          script: |
            cd /home/ec2-user/SK-AXIS-SERVER

            if [ -f ".env" ]; then
              echo "[✓] .env 파일 존재 확인됨. 배포를 계속합니다."
            else
              echo "[⚠] .env 파일이 없습니다. 배포가 실패할 수 있습니다."
            fi

            echo "== Docker 이미지 풀 및 배포 시작 =="
            docker pull ${{ secrets.DOCKER_USERNAME }}/skaxis-server:latest

            # SpringBoot만 재시작
            docker-compose -f docker-compose.dev.yml up -d springboot

            # 오래된 이미지 정리
            docker image prune -f
            echo "=== SpringBoot 업데이트 완료! ==="
