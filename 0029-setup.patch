From a8d11fd4bf29532d4c189996674c0561b1a02fd7 Mon Sep 17 00:00:00 2001
From: starwarrior77 <kkk792100@naver.com>
Date: Wed, 18 Jun 2025 19:53:58 +0900
Subject: [PATCH 29/33] =?UTF-8?q?setup=20=EB=AC=B8=EC=A0=9C=20=ED=95=B4?=
 =?UTF-8?q?=EA=B2=B0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 client/src/components/Interview.vue        | 16 +++-
 client/src/components/InterviewSetup.vue   | 87 +++++++++++-----------
 client/src/components/InterviewerLogin.vue | 12 +++
 client/src/data/questionData.ts            |  4 +
 client/src/main.ts                         | 38 ++++++++--
 client/src/services/interviewService.ts    | 52 ++++++++++++-
 6 files changed, 152 insertions(+), 57 deletions(-)

diff --git a/client/src/components/Interview.vue b/client/src/components/Interview.vue
index fd25868..456826e 100644
--- a/client/src/components/Interview.vue
+++ b/client/src/components/Interview.vue
@@ -31,7 +31,7 @@
               <span class="text-sm text-gray-500">지원자 {{ index + 1 }}</span>
             </div>
             <div class="space-y-4">
-              <div v-for="(question, qIndex) in getQuestionsForCandidate(candidateIds[index])" :key="question.id" class="p-4 bg-gray-50 rounded-lg">
+              <div v-for="(question, qIndex) in getQuestionsForCandidate(candidateIds[index] || 0)" :key="question.id" class="p-4 bg-gray-50 rounded-lg">
                 <div class="flex items-center gap-3 mb-2">
                   <span class="flex items-center justify-center w-6 h-6 bg-red-600 text-white rounded-full text-sm font-medium">
                     {{ qIndex + 1 }}
@@ -105,7 +105,14 @@ interface Props {
   interviewerIds: number[]
 }
 
-const props = defineProps<Props>()
+const props = withDefaults(defineProps<Props>(), {
+  roomName: '',
+  timeRange: '',
+  interviewers: '',
+  candidates: () => [],
+  candidateIds: () => [],
+  interviewerIds: () => []
+})
 
 type Emits = {
   (e: 'startSession'): void
@@ -122,6 +129,11 @@ const isAnalyzing = ref(false)
 const nonverbalData = ref<Record<number, any>>({})
 
 const getQuestionsForCandidate = (candidateId: number): Question[] => {
+  // candidateId가 유효한지 확인
+  if (candidateId === undefined || candidateId === null || isNaN(candidateId)) {
+    console.warn(`유효하지 않은 candidateId: ${candidateId}`);
+    return getCandidateQuestions(0); // 기본 질문 반환
+  }
   return getCandidateQuestions(candidateId)
 }
 
diff --git a/client/src/components/InterviewSetup.vue b/client/src/components/InterviewSetup.vue
index 5407b41..d97e2da 100644
--- a/client/src/components/InterviewSetup.vue
+++ b/client/src/components/InterviewSetup.vue
@@ -25,7 +25,7 @@
             <div class="flex-1">
               <h3 class="text-xl font-bold mb-1 tracking-wide">
                 <span class="bg-gradient-to-r from-red-600 to-orange-500 bg-clip-text text-transparent">
-                  면접관님 환영합니다
+                  {{ userDisplayName }}님 환영합니다
                 </span>
               </h3>
             </div>
@@ -170,11 +170,16 @@ const error = ref<string | null>(null);
 const showAdminLogin = ref(false);
 const selectedSchedule = ref<any>(null);
 
-// 지원자 정보를 저장할 변수 추가
-const intervieweeData = ref<any[]>([]);
+// 로그인한 사용자 이름을 가져오는 computed 속성
+const userDisplayName = computed(() => {
+  return localStorage.getItem('userDisplayName') || '면접관';
+});
 
 // API 데이터에서 동적으로 rooms 생성
 const rooms = computed(() => {
+  if (!schedules.value || !Array.isArray(schedules.value)) {
+    return [];
+  }
   const uniqueRooms = new Set(schedules.value.map(schedule => schedule.roomName));
   return Array.from(uniqueRooms).map((roomName, index) => ({
     id: `room${index + 1}`,
@@ -197,11 +202,14 @@ const canProceed = computed(() => {
 });
 
 // props.rooms 대신 rooms.value 사용
-const filteredSchedules = computed(() =>
-  schedules.value.filter(schedule => 
+const filteredSchedules = computed(() => {
+  if (!schedules.value || !Array.isArray(schedules.value)) {
+    return [];
+  }
+  return schedules.value.filter(schedule => 
     schedule.roomName === rooms.value.find(r => r.id === selectedRoom.value)?.name
-  )
-);
+  );
+});
 
 const toggleRoomDropdown = () => { showRoomDropdown.value = !showRoomDropdown.value; };
 const selectRoom = (roomId: string) => {
@@ -218,34 +226,20 @@ const fetchSchedules = async () => {
   
   try {
     const response = await getInterviewSchedules(selectedDate.value);
-    schedules.value = response.schedules;
+    console.log('API Response:', response);
+    schedules.value = response.schedules || [];
   } catch (err) {
     error.value = '면접 일정을 불러오는데 실패했습니다.';
     console.error(err);
+    schedules.value = []; // 에러 시 빈 배열로 초기화
   } finally {
     loading.value = false;
   }
 };
 
-// 지원자 정보를 가져오는 함수 추가
-const fetchInterviewees = async () => {
-  try {
-    const response = await fetch('/api/v1/interviews/simple', {
-      method: 'GET',
-      headers: {
-        'Content-Type': 'application/json'
-      }
-    });
-    
-    if (!response.ok) {
-      throw new Error('지원자 정보 조회 실패');
-    }
-    
-    const data = await response.json();
-    intervieweeData.value = data.data || [];
-  } catch (err) {
-    console.error('지원자 정보 조회 중 오류:', err);
-  }
+const selectTimeSlot = (schedule: any) => {
+  selectedSchedule.value = schedule;
+  selectedTimeSlot.value = schedule.timeRange;
 };
 
 // 날짜가 변경될 때마다 일정을 다시 불러옵니다
@@ -253,29 +247,33 @@ watch(selectedDate, () => {
   fetchSchedules();
 });
 
-const selectTimeSlot = (schedule: any) => {
-  selectedSchedule.value = schedule;
-  selectedTimeSlot.value = schedule.timeRange;
-};
-
 const onStartInterview = () => {
   if (!canProceed.value || !selectedSchedule.value) return;
   
-  // 지원자 이름을 ID로 매핑
+  // 면접 일정에서 지원자 정보 추출
   const candidateIds: number[] = [];
   const candidateNames: string[] = [];
   
-  selectedSchedule.value.interviewees.forEach((name: string) => {
-    const interviewee = intervieweeData.value.find(item => item.name === name);
-    if (interviewee) {
-      candidateIds.push(interviewee.id);
-      candidateNames.push(name);
-    } else {
-      console.warn(`지원자 정보를 찾을 수 없습니다: ${name}`);
-      // 임시로 이름을 그대로 사용
+  // API 응답에서 해당 스케줄의 지원자 정보 찾기
+  const scheduleData = schedules.value.find(schedule => 
+    schedule.roomName === selectedSchedule.value.roomName &&
+    schedule.timeRange === selectedSchedule.value.timeRange
+  );
+  
+  if (scheduleData && scheduleData.interviewees) {
+    scheduleData.interviewees.forEach((name: string) => {
       candidateNames.push(name);
-    }
-  });
+      // 임시 ID 생성 (실제로는 API에서 받은 intervieweeId를 사용해야 함)
+      candidateIds.push(-(candidateNames.length));
+    });
+  }
+  
+  // candidateIds가 비어있지 않은지 확인
+  if (candidateIds.length === 0) {
+    console.error('지원자 정보를 찾을 수 없습니다.');
+    alert('지원자 정보를 불러오는 중 오류가 발생했습니다. 다시 시도해주세요.');
+    return;
+  }
   
   router.push({
     name: 'interview',
@@ -284,7 +282,7 @@ const onStartInterview = () => {
       date: selectedDate.value,
       timeRange: selectedSchedule.value.timeRange,
       interviewers: selectedSchedule.value.interviewers.join(', '),
-      interviewerIds: JSON.stringify(selectedSchedule.value.interviewerIds),
+      interviewerIds: JSON.stringify(selectedSchedule.value.interviewerIds || []),
       candidates: JSON.stringify(candidateNames),
       candidateIds: JSON.stringify(candidateIds)
     }
@@ -304,7 +302,6 @@ const logout = () => {
 
 onMounted(() => {
   fetchSchedules();
-  fetchInterviewees(); // 지원자 정보도 함께 가져오기
   document.addEventListener('click', (event) => {
     const target = event.target as HTMLElement;
     if (!target.closest('.relative') && showRoomDropdown.value) {
diff --git a/client/src/components/InterviewerLogin.vue b/client/src/components/InterviewerLogin.vue
index 46275c9..9631299 100644
--- a/client/src/components/InterviewerLogin.vue
+++ b/client/src/components/InterviewerLogin.vue
@@ -213,6 +213,18 @@ const handleLogin = async () => {
         console.log('로그인 성공, 토큰 저장됨');
       }
       
+      // 응답 본문에서 사용자 정보 파싱
+      try {
+        const userData = await response.json();
+        // 사용자 정보를 localStorage에 저장
+        localStorage.setItem('userName', userData.username || '');
+        localStorage.setItem('userDisplayName', userData.name || '');
+        localStorage.setItem('userType', userData.userType || '');
+        console.log('사용자 정보 저장됨:', userData);
+      } catch (parseError) {
+        console.warn('사용자 정보 파싱 실패:', parseError);
+      }
+      
       // 로그인 성공 시 면접 설정 페이지로 이동
       router.push('/setup');
     } else {
diff --git a/client/src/data/questionData.ts b/client/src/data/questionData.ts
index a11c261..bb4a041 100644
--- a/client/src/data/questionData.ts
+++ b/client/src/data/questionData.ts
@@ -137,6 +137,10 @@ export const individualQuestions: Record<string, Question[]> = {
 
 // 지원자별 전체 질문 목록을 가져오는 함수
 export const getQuestionsForCandidate = (candidateId: number): Question[] => {
+  if (candidateId === undefined || candidateId === null) {
+    console.warn('candidateId가 undefined 또는 null입니다. 기본 질문만 반환합니다.');
+    return [...commonQuestions];
+  }
   const candidateQuestions = individualQuestions[candidateId.toString()] || [];
   return [...commonQuestions, ...candidateQuestions];
 }; 
\ No newline at end of file
diff --git a/client/src/main.ts b/client/src/main.ts
index b325289..0554b10 100644
--- a/client/src/main.ts
+++ b/client/src/main.ts
@@ -31,14 +31,36 @@ const router = createRouter({
       path: '/interview',
       name: 'interview',
       component: Interview,
-      props: (route) => ({
-        roomName: route.query.roomName as string,
-        timeRange: route.query.timeRange as string,
-        interviewers: route.query.interviewers as string,
-        interviewerIds: JSON.parse(route.query.interviewerIds as string || '[]'),
-        candidates: JSON.parse(route.query.candidates as string || '[]'),
-        candidateIds: JSON.parse(route.query.candidateIds as string || '[]')
-      })
+      props: (route) => {
+        try {
+          const candidateIdsStr = route.query.candidateIds as string || '[]';
+          const candidateIds = JSON.parse(candidateIdsStr);
+          
+          // candidateIds가 배열이고 모든 요소가 숫자인지 확인
+          const validCandidateIds = Array.isArray(candidateIds) 
+            ? candidateIds.filter(id => typeof id === 'number' && !isNaN(id))
+            : [];
+          
+          return {
+            roomName: route.query.roomName as string,
+            timeRange: route.query.timeRange as string,
+            interviewers: route.query.interviewers as string,
+            interviewerIds: JSON.parse(route.query.interviewerIds as string || '[]'),
+            candidates: JSON.parse(route.query.candidates as string || '[]'),
+            candidateIds: validCandidateIds
+          };
+        } catch (error) {
+          console.error('라우터 props 파싱 오류:', error);
+          return {
+            roomName: route.query.roomName as string,
+            timeRange: route.query.timeRange as string,
+            interviewers: route.query.interviewers as string,
+            interviewerIds: [],
+            candidates: [],
+            candidateIds: []
+          };
+        }
+      }
     },
     {
       path: '/result',
diff --git a/client/src/services/interviewService.ts b/client/src/services/interviewService.ts
index 6d51ec4..0188e3c 100644
--- a/client/src/services/interviewService.ts
+++ b/client/src/services/interviewService.ts
@@ -11,9 +11,23 @@ interface ScheduleResponse {
   message: string;
 }
 
+interface ApiResponse {
+  data: Array<{
+    intervieweeId: number;
+    applicantName: string;
+    applicantId: number | null;
+    interviewDate: number[];
+    interviewStatus: string;
+    score: number;
+    interviewer: string;
+    interviewLocation: string;
+    createdAt: number[];
+  }>;
+  totalCount: number;
+}
+
 export const getInterviewSchedules = async (date: string): Promise<ScheduleResponse> => {
   try {
-    // 수정: schedule/all 엔드포인트 사용
     const response = await fetch(`http://3.38.218.18:8080/api/v1/interviews/simple?date=${date}`, {
       method: 'GET',
       headers: {
@@ -21,7 +35,41 @@ export const getInterviewSchedules = async (date: string): Promise<ScheduleRespo
       }
     });
 
-    return response.json();
+    const apiResponse: ApiResponse = await response.json();
+    
+    // API 응답을 기존 인터페이스에 맞게 변환
+    const scheduleMap = new Map<string, InterviewSchedule>();
+    
+    apiResponse.data.forEach(item => {
+      // 날짜 배열을 문자열로 변환
+      const dateStr = item.interviewDate.join('-');
+      
+      // 시간대는 임시로 기본값 사용 (API에서 시간 정보가 없으므로)
+      const timeRange = '09:00 - 10:00'; // 기본값
+      
+      const key = `${item.interviewLocation}_${timeRange}`;
+      
+      if (!scheduleMap.has(key)) {
+        scheduleMap.set(key, {
+          interviewDate: item.interviewDate,
+          timeRange: timeRange,
+          roomName: item.interviewLocation,
+          interviewers: item.interviewer.split(', ').filter(name => name.trim()),
+          interviewees: []
+        });
+      }
+      
+      // 지원자 추가
+      const schedule = scheduleMap.get(key)!;
+      if (!schedule.interviewees.includes(item.applicantName)) {
+        schedule.interviewees.push(item.applicantName);
+      }
+    });
+    
+    return {
+      schedules: Array.from(scheduleMap.values()),
+      message: '면접 일정 조회 성공'
+    };
   } catch (error) {
     console.error('면접 일정 조회 중 오류 발생:', error);
     throw error;
-- 
2.39.5 (Apple Git-154)

